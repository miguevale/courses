{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Listas y tuplas\n",
    "\n",
    "90 min | Última modificación: Junio 07, 2020."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Listas"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Las listas permiten guardar más de un elemento dentro de una variable en un orden concreto.\n",
    "Pueden contener un número ilimitado de variables de cualquier tipo:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Calos\n",
      "Sandra\n",
      "Lorenzo\n",
      "Laura\n"
     ]
    }
   ],
   "source": [
    "alumnos = [\"Calos\", \"Sandra\", \"Lorenzo\", \"Laura\"]\n",
    "print(alumnos [0]) # muestra \"Calos\"\n",
    "print(alumnos [1]) # muestra \"Sandra\"\n",
    "print(alumnos [2]) # muestra \"Lorenzo\"\n",
    "print(alumnos [-1]) # muestra \"Laura\""
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Los métodos más utilizados con las listas son los siguientes:\n",
    "\n",
    "```list.append(x)``` – agrega el elemento ```x``` al final de la lista.\n",
    "\n",
    "```list.extend(L)``` – agrega la lista ```L``` al final de la lista.\n",
    "\n",
    "```list.insert(i,x)``` – inserta el elemento ```x``` en la posición ```i```.\n",
    "\n",
    "```list.remove(x)``` – remueve el elemento ```x```.\n",
    "\n",
    "```list.pop([j])``` – remueve el elemento en la posición ```j``` de la lista.\n",
    "\n",
    "```list.clear()``` – borra la lista; elimina todos los elementos de la lista.\n",
    "\n",
    "```list.index(x)``` – devuelve el indice del elemento ```x```\n",
    "\n",
    "```list.count(x)``` – Cuenta las veces que aparece el elemento ```x```.\n",
    "\n",
    "```list.sort(key=None, reverse=False)``` – ordena los elementos de la lista.\n",
    "\n",
    "```list.reverse()``` – Inverte el orden de los elementos de la lista.\n",
    "\n",
    "```list.copy()``` – crea una copia de la lista."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['Calos', 'Sandra', 'Lorenzo', 'Laura']\n"
     ]
    }
   ],
   "source": [
    "alumnos = [\"Calos\", \"Sandra\", \"Lorenzo\", \"Laura\"] # Creación de la lista\n",
    "print(alumnos)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['Calos', 'Sandra', 'Lorenzo', 'Laura', 'Jhon']\n"
     ]
    }
   ],
   "source": [
    "alumnos.append(\"Jhon\") # Inserta “Jhon” al final de la lista\n",
    "print(alumnos)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['Marcela', 'Calos', 'Sandra', 'Lorenzo', 'Laura', 'Jhon']\n"
     ]
    }
   ],
   "source": [
    "alumnos.insert(0,\"Marcela\") # Inserta “Marcela” en la posición 0\n",
    "print(alumnos)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['Calos', 'Sandra', 'Lorenzo', 'Laura', 'Jhon']\n"
     ]
    }
   ],
   "source": [
    "alumnos.remove(\"Marcela\") # Elimina la primera aparición de “Marcela” de la lista\n",
    "print(alumnos)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['Calos', 'Sandra', 'Lorenzo', 'Laura']\n"
     ]
    }
   ],
   "source": [
    "alumnos.pop() # Elimina el último elemento de la lista\n",
    "print(alumnos)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[]\n"
     ]
    }
   ],
   "source": [
    "alumnos.clear() # Elimina todos los elementos de la lista\n",
    "print(alumnos)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "2"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "alumnos = [\"Calos\", \"Sandra\", \"Lorenzo\", \"Laura\"]\n",
    "alumnos.index(\"Lorenzo\") #Devuelve el índice de la primera aparición de \"Lorenzo\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['Calos', 'Laura', 'Lorenzo', 'Sandra']\n"
     ]
    }
   ],
   "source": [
    "alumnos.sort() # Ordena la lista (los elementos deben ser comparables)\n",
    "print(alumnos)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['Calos', 'Laura', 'Lorenzo', 'Sandra']"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "alumnos = [\"Calos\", \"Sandra\", \"Lorenzo\", \"Laura\"]\n",
    "sorted(alumnos) # Devuelve una copia de la lista 'alumnos' ordenada "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['Laura', 'Lorenzo', 'Sandra', 'Calos']\n"
     ]
    }
   ],
   "source": [
    "alumnos = [\"Calos\", \"Sandra\", \"Lorenzo\", \"Laura\"]\n",
    "alumnos.reverse() # Ordena la lista en orden inverso\n",
    "print(alumnos)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['Laura', 'Lorenzo', 'Sandra', 'Calos']\n"
     ]
    }
   ],
   "source": [
    "alumnos.copy() # Devuelve una copia de la lista\n",
    "print(alumnos)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['Calos', 'Sandra', 'Lorenzo', 'Laura', 1, 2, 3, 4, 5]\n"
     ]
    }
   ],
   "source": [
    "alumnos = [\"Calos\", \"Sandra\", \"Lorenzo\", \"Laura\"]\n",
    "otra_lista = [1, 2, 3, 4, 5]\n",
    "alumnos.extend(otra_lista) # Fusiona las dos listas\n",
    "print(alumnos)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x = list(range(10)) # convierte un objeto rango en lista\n",
    "x"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y = x  # `y` apunta en memoria a la misma lista que `x`.\n",
    "y\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[0, 1, 2, 3, 4, 5, 6, 7, 8]"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y.pop()  # si se remueve un elemento en la lista `y`, también se remueve en la lista `x`\n",
    "x"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x = list(range(10))\n",
    "y = x.copy()         # para evitar el problema anterior se usa `copy()`\n",
    "x.pop()\n",
    "y"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1 2 3 4\n"
     ]
    }
   ],
   "source": [
    "x = ['a', 'b', 'b', 'c', 'c', 'c', 'd', 'd', 'd', 'd'] # cuenta la cantidad de veces que aparece cada elemento\n",
    "print(x.count('a'), x.count('b'), x.count('c'), x.count('d'))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Otra forma de borrado de elementos de una lista\n",
    "\n",
    "El comando ```del``` permite borar elementos de una lista."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['Sandra', 'Lorenzo', 'Laura']\n"
     ]
    }
   ],
   "source": [
    "# método visto anteriormente\n",
    "alumnos = [\"Calos\", \"Sandra\", \"Lorenzo\", \"Laura\"]\n",
    "alumnos.remove(\"Calos\") # Elimina la primera aparición de “Sandra” de la lista\n",
    "print(alumnos)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['Sandra', 'Lorenzo', 'Laura']\n"
     ]
    }
   ],
   "source": [
    "# método de borrado por medio del index\n",
    "alumnos = [\"Calos\", \"Sandra\", \"Lorenzo\", \"Laura\"]\n",
    "del alumnos[0] # Elimina elemento de la primera posición de la lista\n",
    "print(alumnos)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['Calos', 'Sandra']"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "alumnos = [\"Calos\", \"Sandra\", \"Lorenzo\", \"Laura\"]\n",
    "del alumnos[2:4]\n",
    "alumnos"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[]"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "alumnos = [\"Calos\", \"Sandra\", \"Lorenzo\", \"Laura\"]\n",
    "del alumnos[:]  # Elimina todos los elementos de la lista. Similar list.clear()\n",
    "alumnos"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [],
   "source": [
    "alumnos = [\"Calos\", \"Sandra\", \"Lorenzo\", \"Laura\"]\n",
    "del alumnos # Elimina la lista\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Subconjunto de lista\n",
    "\n",
    "Seleccionar valores individuales de una lista es solo una parte de la historia. También es posible dividir su lista, lo que significa seleccionar varios elementos de su lista. Use la siguiente sintaxis:\n",
    "\n",
    "```python\n",
    "my_list[inicio:fin]\n",
    "```\n",
    "\n",
    "El índice inicio se incluirá, mientras que el  índice fin no.\n",
    "\n",
    "El siguiente ejemplo de código muestra un ejemplo. Se selecciona una lista con \"b\" y \"c\", correspondiente a los índices 1 y 2, de una lista x:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['b', 'c']"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x = [\"a\", \"b\", \"c\", \"d\"]  \n",
    "x[1:3]  \n",
    "\n",
    "#Los elementos con índice 1 y 2 están incluidos, mientras que el elemento con índice 3 no lo está."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "También es posible no especificar estos índices. Si no especifica el índice inicio, Python seleccionará la sublista desde el primer elemento de la lista. Si no especifica el índice fin, la sublista irá hasta el último elemento de su lista."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['a', 'b']\n",
      "['c', 'd']\n",
      "['a', 'b', 'c', 'd']\n"
     ]
    }
   ],
   "source": [
    "x = [\"a\", \"b\", \"c\", \"d\"]\n",
    "\n",
    "print(x[:2])\n",
    "print(x[2:])\n",
    "print(x[:])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Subconjunto de lista de listas\n",
    "\n",
    "Viste antes que una lista de Python puede contener prácticamente cualquier cosa; incluso otras listas! Para subconjuntar listas de listas, puede usar la misma técnica que antes: corchetes. Pruebe los comandos en el siguiente ejemplo de código en las celdas de jupyter:\n",
    "\n",
    "```python\n",
    "x = [[\"a\", \"b\", \"c\"],  \n",
    "     [\"d\", \"e\", \"f\"],  \n",
    "     [\"g\", \"h\", \"i\"]]  \n",
    "x[2][0]  \n",
    "x[2][:2]\n",
    "```\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "g\n",
      "['g', 'h']\n",
      "['g', 'h', 'i']\n",
      "[['g', 'h', 'i']]\n"
     ]
    }
   ],
   "source": [
    "x = [[\"a\", \"b\", \"c\"],  \n",
    "     [\"d\", \"e\", \"f\"],  \n",
    "     [\"g\", \"h\", \"i\"]]  \n",
    "print(x[2][0])  \n",
    "print(x[2][:2])\n",
    "print(x[2]) # da como resultado una lista que puede volver a subconjuntar agregando corchetes adicionales.\n",
    "print([x[2]])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Desempaquetado de listas\n",
    "\n",
    "Una acción típica de las listas es “desempaquetar” (unpack) sus valores. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[2, 3]\n"
     ]
    }
   ],
   "source": [
    "a, *rest = [1, 2, 3]    # a = 1, rest = [2, 3]\n",
    "print(rest)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[2, 3]\n"
     ]
    }
   ],
   "source": [
    "a, *middle, c = [1, 2, 3, 4] # a = 1, middle = [2, 3], c = 4\n",
    "print(middle)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Recorrer una lista\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "La forma habitual de recorrer una lista es mediante la sentencia for, tal y como muestra el ejemplo a continuación:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Programo en  Python\n",
      "Programo en  Excel\n",
      "Programo en  R\n"
     ]
    }
   ],
   "source": [
    "for elemento in ['Python','Excel','R']:\n",
    "    print(\"Programo en \", elemento)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "De igual manera se podría hacer mediante la sentencia while:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Python\n",
      "Excel\n",
      "R\n"
     ]
    }
   ],
   "source": [
    "lista = ['Python','Excel','R']\n",
    "i = 0\n",
    "sizeofList = len(lista)\n",
    "while i < sizeofList :\n",
    "    print(lista[i])\n",
    "    i += 1"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Tuplas"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Las tuplas son listas inmutables. Es decir, una vez declaradas, no se pueden realizar modificaciones sobre ellas (añadir/eliminar elementos o hacer modificaciones sobre ellos). Para definir una tupla se escriben los elementos separados por comas:\n",
    "\n",
    "```tupla = 1,2,3```\n",
    "\n",
    "El acceso a sus elementos se hace de igual que con listas:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "('a', 'b', 'c', 'd', 'e', 'f')\n",
      "b\n",
      "('c', 'd')\n"
     ]
    }
   ],
   "source": [
    "tupla = \"a\", \"b\", \"c\",\"d\",\"e\",\"f\"\n",
    "print(tupla) # una tupla se diferencia de una lista porque se imprime entre paréntesis. \n",
    "print(tupla[1])\n",
    "print(tupla[2:4]) "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Una acción típica de las tuplas es “desempaquetar” (unpack) sus valores:\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1\n",
      "2\n",
      "3\n"
     ]
    }
   ],
   "source": [
    "tupla = (1,2,3)\n",
    "a, b, c = tupla # asignación de los elementos de una tupla.\n",
    "print(a)\n",
    "print(b)\n",
    "print(c)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Tupla de tuplas\n",
    "\n",
    "Al igual que la lista de listas, también se puede subconjuntar en tupla de tuplas."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "((1, 2, 3), (1, 2, 3, 4, 5))"
      ]
     },
     "execution_count": 33,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Las tuplas pueden anidarse.\n",
    "u = tupla, (1, 2, 3, 4, 5)\n",
    "u"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "La función len() devuelve el número de elementos de una lista o tupla:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "4\n",
      "3\n"
     ]
    }
   ],
   "source": [
    "alumnos = [\"Calos\", \"Sandra\", \"Lorenzo\", \"Laura\"]\n",
    "tupla = (1,2,3)\n",
    "print(len(alumnos))\n",
    "print(len(tupla))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Conjuntos"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Un conjunto es una colección no ordenada y sin elementos repetidos. Los conjuntos también soportan operaciones matemáticas como la unión,\n",
    "intersección, diferencia, y diferencia simétrica."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'banana', 'naranja', 'pera', 'manzana'}\n"
     ]
    }
   ],
   "source": [
    "canasta = ['manzana', 'naranja', 'manzana', 'pera', 'naranja', 'banana']\n",
    "fruta = set(canasta)\n",
    "print(fruta)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "True"
      ]
     },
     "execution_count": 36,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "'naranja' in fruta # verificación de pertenencia rápida"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "False"
      ]
     },
     "execution_count": 37,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "'yerba' in fruta"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'c', 'd', 'r', 'b', 'a'}\n",
      "{'c', 'l', 'z', 'm', 'a'}\n"
     ]
    }
   ],
   "source": [
    "a = set('abracadabra') # letras únicas en a\n",
    "b = set('alacazam') # letras únicas en b\n",
    "print(a) \n",
    "print(b)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'b', 'd', 'r'}"
      ]
     },
     "execution_count": 39,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "a - b # letras en a pero no en b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'a', 'b', 'c', 'd', 'l', 'm', 'r', 'z'}"
      ]
     },
     "execution_count": 40,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "a | b # letras en a o en b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'a', 'c'}"
      ]
     },
     "execution_count": 41,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "a & b # letras en a y en b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'b', 'd', 'l', 'm', 'r', 'z'}"
      ]
     },
     "execution_count": 42,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "a ^ b # letras en a o b pero no en ambos"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.10"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
