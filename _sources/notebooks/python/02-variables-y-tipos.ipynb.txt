{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Variables y Tipos de datos\n",
    "======================\n",
    "\n",
    "90 min | Última modificación: Junio 07, 2020.\n",
    "\n",
    "Las variables permiten almacenar datos del programa. Estas serán de un tipo u otro en función dela información que se guarde en ellas.\n",
    "\n",
    "## Clasificación\n",
    "\n",
    "Los tipos de datos compuestos estándar se pueden clasificar como los dos siguientes:  \n",
    "* **Mutable**: su contenido (o dicho valor) puede cambiarse en tiempo de ejecución.  \n",
    "* **Inmutable**: su contenido (o dicho valor) no puede cambiarse en tiempo de ejecución.  \n",
    "\n",
    "Se pueden resumir los tipos de datos compuestos estándar en la siguiente tabla:  \n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Categoría de tipo  | Nombre | Descripción\n",
    ":------------------|-------:|-------------\n",
    "Números inmutables|int|entero\n",
    "Números inmutables|long|entero long\n",
    "Números inmutables|float|coma flotante\n",
    "Números inmutables|complex|complejo\n",
    "Números inmutables|bool|boleano\n",
    "Secuencias inmutables|str| cadena de caracteres\n",
    "Secuencias inmutables|unicode| cadena de caracteres Unicode\n",
    "Secuencias inmutables|tuple| tupla\n",
    "Secuencias inmutables|xrange| rango inmutable \n",
    "Secuencias mutables| list| lista\n",
    "Secuencias mutables|range| rango mutable\n",
    "Mapeos| dict| diccionario\n",
    "Conjuntos mutables |set |conjunto mutable\n",
    "Conjuntos inmutables |frozenset |conjunto inmutable"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Variables\n",
    "\n",
    "### Variables\n",
    "Es un nombre que se refiere a un objeto que reside en la memoria. El objeto puede ser de alguno de los tipos vistos\n",
    "(número o cadena de texto), o alguno de los otros tipos existentes en Python.\n",
    "\n",
    "En Python, una variable le permite hacer referencia a un valor con un nombre. Para crear un uso variable =:\n",
    "\n",
    "### Ejemplos de variables\n",
    "\n",
    "A continuación, se creará un par de variables a modo de ejemplo. Una de tipo cadenas de caracteres y una de tipo entero\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "str"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "c = \"Hola Mundo\" # cadenas de caracteres\n",
    "type(c) # comprobar tipo de dato"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "int"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "e = 23 # número entero\n",
    "type(e) # comprobar tipo de dato"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Como puede ver en Python, a diferencia de muchos otros lenguajes, no se declara el tipo de la variable al crearla.\n",
    "En visual basic, por ejemplo, definir una variable seria así:\n",
    "```vb\n",
    "dim c as string, e as integer\n",
    "c = \"Hola Mundo\"\n",
    "e = 23\n",
    "```"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Ejemplo de asignar múltiples valores a a múltiples variables\n",
    "\n",
    "A continuación, se creará múltiples variables (entero , coma flotante, cadenas de caracteres) asignando múltiples valores:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "a, b, c = 5, 3.2, \"Hola\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "5\n",
      "3.2\n",
      "Hola\n"
     ]
    }
   ],
   "source": [
    "print(a)\n",
    "print(b)\n",
    "print(c)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Si usted quiere asignar el mismo valor a múltiples variables al mismo tiempo, usted puede hacer lo siguiente:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "x = y = z = True"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "True\n",
      "True\n",
      "True\n"
     ]
    }
   ],
   "source": [
    "print(x)\n",
    "print(y)\n",
    "print(z)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "El nombre de una variable se conoce como **identificador**, y deberá cumplir las siguientes reglas:\n",
    "* Comenzar con una letra o un guión bajo.\n",
    "* El resto del nombre estará formado por letras, números o guiones bajos.\n",
    "* Los nombres de las variables son *case sensitive*, es decir, no es lo mismo que una variable se llame resultado que RESULTADO.\n",
    "* Existen una serie de palabras reservadas que no se pueden utilizar."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Palabras reservadas\n",
    "\n",
    "Existen ciertas palabras que tienen significado especial para el intérprete de Python. Estas no pueden utilizarse para ningún otro fin (como ser nombrar valores) excepto para el que han sido creadas. Estas son:\n",
    "```python\n",
    "and\n",
    "as\n",
    "assert\n",
    "break\n",
    "class\n",
    "continue\n",
    "def\n",
    "del\n",
    "elif\n",
    "else\n",
    "except\n",
    "exec\n",
    "finally\n",
    "for\n",
    "from\n",
    "global\n",
    "if\n",
    "import\n",
    "in\n",
    "is\n",
    "lambda\n",
    "not\n",
    "or\n",
    "pass\n",
    "print\n",
    "raise\n",
    "return\n",
    "try\n",
    "while\n",
    "with\n",
    "yield\n",
    "```"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Resumen de tipos de variables"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "edad = 24 # número entero (integer)\n",
    "precio = 112.9 # número de punto flotante (float)\n",
    "titulo = 'Aprende Python desde cero' # cadena de texto (string)\n",
    "test = True # booleano"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Lectura de datos en Python\n",
    "```python\n",
    "La función input() permite introducir datos al usuario:\n",
    "```"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Carlos\n",
      "Carlos\n"
     ]
    }
   ],
   "source": [
    "nombre = input()\n",
    "print(nombre)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Como se puede ver en el siguiente ejemplo, es posible también mostrar un mensaje al usuario, tal y como muestra el siguiente ejemplo."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Escribe tu nombre: Carlos\n",
      "Carlos\n"
     ]
    }
   ],
   "source": [
    "nombre = input(\"Escribe tu nombre: \")\n",
    "print(nombre)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Números\n",
    "\n",
    "Python soporta dos tipos de números: enteros (integer) y de punto flotante (float)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "5\n",
      "5.0\n",
      "5.0\n"
     ]
    }
   ],
   "source": [
    "# integer\n",
    "x = 5\n",
    "print(x)\n",
    "\n",
    "# float\n",
    "y = 5.0\n",
    "print(y)\n",
    "\n",
    "# Otra forma de declarar un float\n",
    "z = float(5)\n",
    "print(z)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Si tenemos dudas del valor de una variable, podemos mostrar su tipo utilizando la función type():"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "float"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x = 5.5\n",
    "type(x)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Cadenas de texto (string)\n",
    "Las cadenas de texto o strings se definen mediante comilla simple (' ') o doble comilla (\" \"):"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Ane\n",
      "Ane\n"
     ]
    }
   ],
   "source": [
    "mi_nombre = 'Ane'\n",
    "print(mi_nombre)\n",
    "mi_nombre= \"Ane\"\n",
    "print(mi_nombre)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "La diferencia principal se encuentra en que las comillas dobles aportan mayor facilidad en textos\n",
    "que incluyan apóstrofes:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "I'm John\n",
      "I'm John\n"
     ]
    }
   ],
   "source": [
    "mi_nombre = 'I\\'m John'\n",
    "print(mi_nombre)\n",
    "mi_nombre= \"I'm John\"\n",
    "print(mi_nombre)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Más información sobre strings y carácteres especiales [Aqui][1]:  \n",
    "\n",
    "[1]:https://docs.python.org/3/tutorial/introduction.html#strings\n",
    "\n",
    "Para definir strings multi-línea se utiliza la triples comillas (\"\"\"):"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      " esto es una\n",
      "frase muy larga de más de\n",
      "una línea ...\n"
     ]
    }
   ],
   "source": [
    "frase = \"\"\" esto es una\n",
    "frase muy larga de más de\n",
    "una línea ...\"\"\"\n",
    "print(frase)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Concatenación de strings\n",
    "\n",
    "Es posible unir dos strings con el operador +:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Hola, mundo\n"
     ]
    }
   ],
   "source": [
    "primera_palabra = 'Hola'\n",
    "frase_completa = primera_palabra + ', mundo'\n",
    "print(frase_completa)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Hola, mundo\n"
     ]
    }
   ],
   "source": [
    "segunda_palabra = 'mundo'\n",
    "frase_completa = primera_palabra + ', ' + segunda_palabra\n",
    "print(frase_completa)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Método alternativo 1**: str.join():  \n",
    "El método join() recibe como argumento el listado (de tipo List, Tuple, String, Dictionary y Set) de strings que se desean concatenar. Se invoca sobre el separador que se utilizará para unir las cadenas (el cual a su vez es un string también):"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'do - re - mi'"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "strings = ['do', 're', 'mi']\n",
    "separador = ' - '\n",
    "separador.join(strings)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Para iterar un elemento detrás del otro se introducirá string vacío como separador:\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'doremi'"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "strings = ['do', 're', 'mi']\n",
    "''.join(strings)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Método alternativo 2**: str.format():  \n",
    "Python 3 introdujo una nueva forma para formatear strings, la cual sustituye a la anterior en la que\n",
    "se hace uso del operador %. Para ello se invoca el método format() de un string:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Meses: Enero, Febrero y Marzo\n",
      "Meses: Febrero, Enero y Marzo\n",
      "Meses: Febrero, Enero y Marzo\n"
     ]
    }
   ],
   "source": [
    "# Ordenado por defecto:\n",
    "frase = \"Meses: {}, {} y {}\".format('Enero','Febrero','Marzo')\n",
    "print(frase)\n",
    "\n",
    "# Especificar el orden indicando la posición:\n",
    "frase = \"Meses: {1}, {0} y {2}\".format('Enero','Febrero','Marzo')\n",
    "print(frase)\n",
    "\n",
    "# Especificar el orden mediante parejas clave-valor:\n",
    "orden_palabra = \"Meses: {ene}, {feb} y {mar}\".format(ene='Enero', feb='Febrero',mar='Marzo')\n",
    "print(frase)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Conversión de tipos\n",
    "\n",
    "A la hora de concatenar un string con otras variables como integer o float puede haber problemas:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "ename": "TypeError",
     "evalue": "must be str, not int",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mTypeError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[1;32m<ipython-input-20-179fea28e54c>\u001b[0m in \u001b[0;36m<module>\u001b[1;34m\u001b[0m\n\u001b[0;32m      1\u001b[0m \u001b[0medad\u001b[0m \u001b[1;33m=\u001b[0m \u001b[1;36m25\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m      2\u001b[0m \u001b[0mnota_media\u001b[0m \u001b[1;33m=\u001b[0m \u001b[1;36m7.3\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m----> 3\u001b[1;33m \u001b[0mprint\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;34m\"Tengo \"\u001b[0m \u001b[1;33m+\u001b[0m \u001b[0medad\u001b[0m \u001b[1;33m+\u001b[0m \u001b[1;34m\" años y mi nota media es \"\u001b[0m \u001b[1;33m+\u001b[0m \u001b[0mnota_media\u001b[0m \u001b[1;33m+\u001b[0m \u001b[1;34m\".\"\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[1;31mTypeError\u001b[0m: must be str, not int"
     ]
    }
   ],
   "source": [
    "edad = 25\n",
    "nota_media = 7.3\n",
    "print(\"Tengo \" + edad + \" años y mi nota media es \" + nota_media + \".\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Mediante la función str() podemos convertir un valor a string y evitar así cualquier tipo de problema:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Tengo 25 años y mi nota media es 7.3.\n"
     ]
    }
   ],
   "source": [
    "edad = 25\n",
    "nota_media = 7.3\n",
    "print(\"Tengo \" + str(edad) + \" años y mi nota media es \" + str(nota_media) + \".\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "De igual manera es posible convertir a otros tipos con las funciones int(), float() and bool()."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Métodos en cadenas de texto (string)\n",
    "\n",
    "Es posible obtener un carácter concreto de un string utilizando los corchetes [] y el índice del carácter al que queremos acceder:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "A\n",
      "p\n",
      "n\n",
      "o\n"
     ]
    }
   ],
   "source": [
    "frase = 'Aprendiendo a programar en Python'\n",
    "print(frase[0]) # devuelve el primer caracter\n",
    "print(frase[1]) # devuelve el segundo caracter\n",
    "print(frase[-1]) # devuelve el primer caracter empezando por el final\n",
    "print(frase[-2]) # # devuelve el segundo caracter empezando por el final"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Si queremos obtener un substring, utilizaremos la siguiente notación:\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "pren\n"
     ]
    }
   ],
   "source": [
    "frase = 'Aprendiendo a programar en Python'\n",
    "mi_substring = frase[1:5] # devuelve los caracteres desde la posición 1 hasta la 5 no incluye el 5)\n",
    "print(mi_substring)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "En caso de dejar la primera variable vacía, se considera la primera posición del string. Dejando la segunda variable vacía se considera la última posición del string:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Apren\n"
     ]
    }
   ],
   "source": [
    "frase = 'Aprendiendo a programar en Python'\n",
    "mi_substring = frase[:5]\n",
    "print(mi_substring)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "ndiendo a programar en Python\n"
     ]
    }
   ],
   "source": [
    "mi_substring = frase[4:]\n",
    "print(mi_substring)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Otros métodos útiles de string:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'APRENDIENDO A PROGRAMAR EN PYTHON'"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "frase.upper() # convierte a mayúsculas"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'aprendiendo a programar en python'"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "frase.lower() # convierte a minúsculas"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'Aprendiendo A Programar En Python'"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "frase.title() # convierte a mayúsculas la primera letra de cada palabra"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1"
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "frase.count('a', 0, 15) # devuelve el número de veces que aparece el substring en el string. Opcionalmente se puede indicar el inicio y fin."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "5"
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "frase.find('d') # devuelve el índice de la primera aparición de 'd' (o -1 si no lo encuentra)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "True"
      ]
     },
     "execution_count": 31,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "'Python' in frase # devuelve True si el string contiene el substring"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'Aprendiendo a programar en python'"
      ]
     },
     "execution_count": 32,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "frase.replace('Python', 'python', 1) # reemplaza 'Python' por 'python'un máximo de 1 vez (opcional)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "False"
      ]
     },
     "execution_count": 33,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "frase.isnumeric() # devuelve True si str contiene solamente números"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.10"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
