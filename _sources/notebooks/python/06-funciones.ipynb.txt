{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Funciones de usuario - básicas\n",
    "\n",
    "90 min | Última modificación: Junio 07, 2020.\n",
    "\n",
    "Una función es un grupo de sentencias que realizan una tarea concreta. Esta forma de agrupar código es una forma de ordenar nuestra aplicación en pequeños bloques, **facilitando así su lectura** y permitiendo **reutilizar** el código que contienen sin esfuerzo. Las funciones son definidas mediante la palabra reservada ```def```"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Definir y llamar a una función\n",
    "\n",
    "La sintaxis de una función en Python es la siguiente:\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "def hola_mundo():\n",
    "    \"\"\"Imprime mensaje\"\"\"\n",
    "    # codigo de la función\n",
    "    print(\"Hola mundo\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "hola_mundo()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Funciones con un solo parámetro"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "def hola_mundo(mensaje):\n",
    "    \"\"\"Imprime mensaje\n",
    "    args:\n",
    "        mensaje\n",
    "        \n",
    "    devuelve:\n",
    "        print(mensaje)  \n",
    "    \n",
    "    \"\"\"\n",
    "    # codigo de la función\n",
    "    print(mensaje)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Hola mundo\n"
     ]
    }
   ],
   "source": [
    "hola_mundo(\"Hola mundo\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Los Docstrings"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Help on function hola_mundo in module __main__:\n",
      "\n",
      "hola_mundo(mensaje)\n",
      "    Imprime mensaje\n",
      "    args:\n",
      "        mensaje\n",
      "        \n",
      "    devuelve:\n",
      "        print(mensaje)\n",
      "\n"
     ]
    }
   ],
   "source": [
    "help(hola_mundo)  # invoca la ayuda de hola_mundo"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Imprime mensaje\n",
      "    args:\n",
      "        mensaje\n",
      "        \n",
      "    devuelve:\n",
      "        print(mensaje)  \n",
      "    \n",
      "    \n"
     ]
    }
   ],
   "source": [
    "print(hola_mundo.__doc__)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Funciones con varios parámetros\n",
    "Existen dos tipos de parámetros o argumentos:\n",
    "* **Parámetros posicionales**: la posición en la que se pasan importa\n",
    "* **Parámetros con palabra clave (keyword arguments)**: la posición no importa, se indica una clave para cada parámetro."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "65\n",
      "65\n"
     ]
    }
   ],
   "source": [
    "def suma(a, b):\n",
    "    '''función la cual suma dos números'''\n",
    "    resultado = a + b\n",
    "    print(resultado)\n",
    "    \n",
    "suma(45, 20) # parámentros posicionales\n",
    "suma(b =20, a = 45) # parametros mediante clave"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Funciones con argumento predeterminado\n",
    "\n",
    "Es posible asignar al parámetro un valor por defecto."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "def hola_mundo(mensaje = \"Anónimo\"):\n",
    "    \"\"\"Imprime mensaje\n",
    "    args:\n",
    "        mensaje\n",
    "        \n",
    "    devuelve:\n",
    "        print(mensaje)  \n",
    "    \n",
    "    \"\"\"\n",
    "    # codigo de la función\n",
    "    print(mensaje)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Hola mundo\n",
      "Anónimo\n"
     ]
    }
   ],
   "source": [
    "hola_mundo(\"Hola mundo\")\n",
    "hola_mundo()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Sentencia return\n",
    "\n",
    "Las funciones pueden devolver un valor utilizando la palabra ```return```. Una vez devuelto un valor, la función finaliza su ejecución."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "def suma(a, b):\n",
    "    '''función la cual suma dos números'''\n",
    "    resultado = a + b\n",
    "    return resultado"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "65\n"
     ]
    }
   ],
   "source": [
    "y = suma(45, 20)\n",
    "print(y)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Retorno múltiple\n",
    "\n",
    "Una característica interesante, es la posibilidad de devolver valores múltiples separados por comas:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    "def prueba():\n",
    "    return \"M sex\", 20, [1,2,3]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "('M sex', 20, [1, 2, 3])"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "prueba()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "En el código anterior los valores múltiples se tratan en conjunto como una tupla inmutable y se pueden reasignar a distintas variables:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "M sex\n",
      "20\n",
      "[1, 2, 3]\n"
     ]
    }
   ],
   "source": [
    "cadena, numero, lista = prueba()\n",
    "print(cadena)\n",
    "print(numero)\n",
    "print(lista)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Ámbito de las variables (scope)\n",
    "\n",
    "El ámbito de una variable (scope) se refiere a la zona del programa dónde una variable “existe”. Fuera del ámbito de una variable no podremos acceder a su valor ni manejarla.\n",
    "\n",
    "Los parámetros y variables definidos en una función no estarán accesibles fuera de la función. A este ámbito se le conoce como ámbito local. Es importante mencionar que una vez ejecutada una función, el valor de las variables locales no se almacena, por lo que la próxima vez que se llame a la función, ésta no recordará ningún valor de llamadas anteriores."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Dentro de la función: 1\n",
      "Fuera de la función: 5\n"
     ]
    }
   ],
   "source": [
    "def calcula():\n",
    "    a = 1\n",
    "    print(\"Dentro de la función:\", a)\n",
    "\n",
    "a = 5\n",
    "calcula()\n",
    "print(\"Fuera de la función:\", a)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Por el contrario, las variables definidas fuera de una función sí que están accesibles desde dentro de la función. Se considera que están en el ámbito global. No obstante, no se podrán modificar dentro de la función a no ser que estén definidas con la palabra clave global."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Dentro de la función: 1\n",
      "Fuera de la función: 1\n"
     ]
    }
   ],
   "source": [
    "def calcula():\n",
    "    global a\n",
    "    a = 1\n",
    "    print(\"Dentro de la función:\", a)\n",
    "\n",
    "a = 5\n",
    "calcula()\n",
    "print(\"Fuera de la función:\", a)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Funciones recursivas"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Las funciones recursivas son funciones que se llaman a sí mismas durante su propia ejecución. Ellas funcionan de forma similar a las iteraciones, pero debe encargarse de planificar el momento en que dejan de llamarse a sí mismas o tendrá una función recursiva infinita.\n",
    "\n",
    "Estas funciones se estilan utilizar para dividir una tarea en sub-tareas más simples de forma que sea más fácil abordar el problema y solucionarlo."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Función recursiva sin retorno\n",
    "\n",
    "Un ejemplo de una función recursiva sin retorno, es el ejemplo de cuenta regresiva hasta cero a partir de un número:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "4\n",
      "3\n",
      "2\n",
      "1\n",
      "Boooooooom!\n",
      "Fin de la función 0\n",
      "Fin de la función 1\n",
      "Fin de la función 2\n",
      "Fin de la función 3\n",
      "Fin de la función 4\n"
     ]
    }
   ],
   "source": [
    "def cuenta_regresiva(numero):\n",
    "    numero -= 1\n",
    "    if numero > 0:\n",
    "        print (numero)\n",
    "        cuenta_regresiva(numero)\n",
    "    else:\n",
    "        print (\"Boooooooom!\")\n",
    "    print (\"Fin de la función\", numero)\n",
    "\n",
    "cuenta_regresiva(5)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Función recursiva con retorno\n",
    "\n",
    "Un ejemplo de una función recursiva con retorno, es el ejemplo del calculo del factorial de un número corresponde al producto de todos los números desde 1 hasta el propio número. Es el ejemplo con retorno más utilizado para mostrar la utilidad de este tipo de funciones:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Valor inicial -> 5\n",
      "Valor inicial -> 4\n",
      "Valor inicial -> 3\n",
      "Valor inicial -> 2\n",
      "Valor inicial -> 1\n",
      "valor final -> 2\n",
      "valor final -> 6\n",
      "valor final -> 24\n",
      "valor final -> 120\n",
      "120\n"
     ]
    }
   ],
   "source": [
    "def factorial(numero):\n",
    "    print (\"Valor inicial ->\",numero)\n",
    "    if numero > 1:\n",
    "        numero = numero * factorial(numero -1)\n",
    "        print (\"valor final ->\",numero)\n",
    "    return numero\n",
    "\n",
    "print (factorial(5))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.10"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
