{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Práctica 1 - Calentamiento\n",
    "\n",
    "\n",
    "<div class=\"alert alert-info\">\n",
    "    \n",
    "***Actividad***\n",
    "    \n",
    "</div>\n",
    "\n",
    "\n",
    "Abra un libro de Jupyter y realice las siguientes actividades:\n",
    "\n",
    "*  Utilice la función \n",
    "``` \n",
    "print()\n",
    "``` para imprimir las siguientes expresiones.\n",
    "\n",
    "\n",
    "## Operadores"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "string = \"Este no es un comentario\"\n",
    "# Imprima la variable string con la función print()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Imprima la suma de 2+2 con la función print()\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Imprima la operación 2 + 2 + 1 con la función print()\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Imprima la operación 50 - 5 * 6 + 8 con la función print()\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Imprima la operación (50 - 5 * 6) / 4 con la función print()\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Imprima la operación 8 / 5 con la función print()\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Imprima la operación 8 // 5 con la función print(). Genera la parte entera de la division\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Imprima la operación 8 % 5 con la función print(). Genera el residuo de la división\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Imprima la operación 5 ** 2 con la función print(). potencia\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Imprima la operación 2 + 2 + 1 con la función print()\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Imprima la operación (50-5*6)/4 con la función print()\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Imprima la operación 7/3 con la función print()\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Imprima la operación 7/-3 con la función print()\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "ancho = 20\n",
    "# Imprima la variable ancho con la función print()\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "largo = 5*9\n",
    "# Imprima la variable largo con la función print()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Imprima square(2) con la función print()\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Igualdad\n",
    "\n",
    "Para verificar si dos valores de Python, o variables, son iguales, puede usar ```==```. Para verificar la desigualdad, necesitas ```!=```. Como repaso, eche un vistazo a los siguientes ejemplos que resultan en todos ```True```. Siéntase libre de probarlos.\n",
    "\n",
    "```python\n",
    "2 == (1 + 1)  \n",
    "\"intermediate\" != \"python\"  \n",
    "True != False  \n",
    "\"Python\" != \"python\"\n",
    "```\n",
    "Cuando escriba estas comparaciones en un script, deberá ajustar una función ```print()``` sobre ellas para ver el resultado.\n",
    "\n",
    "<div class=\"alert alert-info\">\n",
    "    \n",
    "***Actividad***\n",
    "    \n",
    "</div>\n",
    "\n",
    "* En las celdas de jupyter, escriba el código para ver si ```True``` es igual ```False```.\n",
    "* Escriba el código de Python para verificar si ```-5 * 15``` no es igual a ```75```.\n",
    "* Pregunte a Python si los strings ```pyscript``` y ```PyScript``` son iguales.\n",
    "* ¿Qué sucede si comparas booleanos y enteros? Escriba el código para ver si ```True``` y ```1``` son iguales."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Comparison of booleans\n",
    "\n",
    "\n",
    "# Comparison of integers\n",
    "\n",
    "\n",
    "# Comparison of strings\n",
    "\n",
    "\n",
    "# Compare a boolean with an integer\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Mayor y menor que\n",
    "\n",
    "Los signos menores y mayores que (```<``` y ```>```) en Python. Puede combinarlos con un signo igual: ```<=``` y ```>=```. Presta atención: ```<=``` es una sintaxis válida, pero no lo es ```=<```.\n",
    "\n",
    "Todas las expresiones de Python en el siguiente fragmento de código se evalúan para *True*:\n",
    "\n",
    "```python\n",
    "3 < 4\n",
    "3 <= 4\n",
    "\"alpha\" <= \"beta\"\n",
    "```\n",
    "\n",
    "Recuerde que para la comparación de strings, Python determina la relación en función del orden alfabético.\n",
    "\n",
    "<div class=\"alert alert-info\">\n",
    "    \n",
    "***Actividad***\n",
    "    \n",
    "</div>\n",
    "\n",
    "* Escriba expresiones de Python, envueltas en una función ```print()```, para verificar si:\n",
    "    * ```x``` es mayor que o igual a ```-10```. ```x``` ya ha sido definido para ti.\n",
    "    * ```\"test\"``` es menor que o igual a ```y```. ```y``` ya ha sido definido para ti.\n",
    "    * ```True``` es mayor que ```False```."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Comparison of integers\n",
    "x = -3 * 6\n",
    "\n",
    "\n",
    "# Comparison of strings\n",
    "y = \"test\"\n",
    "\n",
    "\n",
    "# Comparison of booleans\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## and, or, not (1)\n",
    "\n",
    "Un booleano es ```1``` o ```0```, ```True``` o ```False```. Con operadores booleanos como ```and```, ```or``` y ```not```, puede combinar estos booleanos para realizar consultas más avanzadas en sus datos.\n",
    "\n",
    "En el código se definen dos variables: ```my_kitchen``` y ```your_kitchen```, que representan áreas.\n",
    "\n",
    "<div class=\"alert alert-info\">\n",
    "    \n",
    "***Actividad***\n",
    "    \n",
    "</div>\n",
    "\n",
    "* Escriba expresiones de Python, envueltas en una función ```print()```, para verificar si:\n",
    "* ```my_kitchen``` es mayor que 10 y menor que 18.\n",
    "* ```my_kitchen``` es menor que 14 o mayor que 17.\n",
    "* duplicar el área de ```my_kitchen``` es menor que el triple del área de ```your_kitchen```."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Define variables\n",
    "my_kitchen = 18.0\n",
    "your_kitchen = 14.0\n",
    "\n",
    "# my_kitchen bigger than 10 and smaller than 18?\n",
    "\n",
    "\n",
    "# my_kitchen smaller than 14 or bigger than 17?\n",
    "\n",
    "\n",
    "# Double my_kitchen smaller than triple your_kitchen?\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## and, or, not (2)\n",
    "\n",
    "Para ver si entendió completamente los operadores booleanos, eche un vistazo al siguiente fragmento de código Python:\n",
    "\n",
    "```python\n",
    "x = 8  \n",
    "y = 9  \n",
    "not(not(x < 3) and not(y > 14 or y > 10))\n",
    "```\n",
    "<div class=\"alert alert-info\">\n",
    "    \n",
    "***Actividad***\n",
    "    \n",
    "</div>\n",
    "\n",
    "¿Cuál será el resultado si ejecuta estos tres comandos?\n",
    "\n",
    "<div class=\"alert alert-info\">\n",
    "    \n",
    "Nota: \n",
    "\n",
    "Observe que *not* tiene una prioridad más alta que and* y *or*, se ejecuta primero.\n",
    "\n",
    "</div>\n",
    "\n",
    "**Respuestas posibles**\n",
    "* Cierto\n",
    "* Falso\n",
    "* La ejecución de estos comandos dará como resultado un error."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "## evalúe sus respuestas\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## ¡Ayuda!\n",
    "\n",
    "Tal vez ya conozca el nombre de una función de Python, pero aún tiene que descubrir cómo usarla. Irónicamente, hay que pedir información sobre una función con otra función: help(). También puede usar `?` antes del nombre de la función.\n",
    "\n",
    "Para obtener ayuda sobre la función `max()`, por ejemplo, puede usar una de estas llamadas:\n",
    "\n",
    "```python\n",
    "help(max)  \n",
    "?max  \n",
    "```\n",
    "\n",
    "<div class=\"alert alert-info\">\n",
    "    \n",
    "***Actividad***\n",
    "    \n",
    "</div>\n",
    "\n",
    "Para la documentación complex(). ¿Cuál de las siguientes afirmaciones es verdadera?\n",
    "\n",
    "**Respuestas posibles**\n",
    "* `complex()` toma exactamente dos argumentos: realy [, imag].\n",
    "* `complex()` toma dos argumentos: realy imag. Ambos argumentos son obligatorios.\n",
    "* `complex()` toma dos argumentos: realy imag. reales un argumento requerido, images un argumento opcional.\n",
    "* `complex()` toma dos argumentos: realy imag. Si no especifica imag, Python lo establece en 1."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "## evalúe sus respuestas\n",
    "\n",
    "\n",
    "\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.10"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
