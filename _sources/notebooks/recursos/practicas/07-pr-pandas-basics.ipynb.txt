{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Practica 07 - Pandas básico"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Diccionario a DataFrame (1)\n",
    "\n",
    "Pandas es una biblioteca de código abierto, que proporciona estructuras de datos y herramientas de análisis de datos de alto rendimiento y fáciles de usar para Python. ¡Suena prometedor!\n",
    "\n",
    "El DataFrame es una de las estructuras de datos más importantes de Pandas. Básicamente es una forma de almacenar datos tabulares donde puede etiquetar las filas y las columnas. Una forma de construir un DataFrame es desde un diccionario.\n",
    "\n",
    "En los ejercicios siguientes, trabajará con datos de vehículos de diferentes países. Cada observación corresponde a un país y las columnas dan información sobre el número de vehículos per cápita, si las personas conducen hacia la izquierda o hacia la derecha, y así sucesivamente.\n",
    "\n",
    "Se definen tres listas en el script:\n",
    "\n",
    "* *names*, que contiene los nombres de países para los que hay datos disponibles.\n",
    "* *dr*, una lista con booleanos que indica si las personas conducen hacia la izquierda o hacia la derecha en el país correspondiente.\n",
    "* *cpc*, el número de vehículos automotores por cada 1000 personas en el país correspondiente.\n",
    "Cada clave del diccionario es una etiqueta de columna y cada valor es una lista que contiene los elementos de la columna.\n",
    "\n",
    "<div class=\"alert alert-info\">\n",
    "    \n",
    "**Actividad**\n",
    "    \n",
    "</div>\n",
    "\n",
    "* Importar pandas como pd.\n",
    "* Use las listas predefinidas para crear un diccionario llamado my_dict. Debe haber tres pares de valores clave:\n",
    "* Clave *'country'* y valor *names*.\n",
    "* Clave *'drives_right'* y valor *dr*.\n",
    "* Clave *'cars_per_cap'* y valor *cpc*.\n",
    "* Use **pd.DataFrame()** para convertir su dict en un DataFrame llamado *cars*.\n",
    "* Imprima *cars* y vea lo hermoso que es.\n",
    "\n",
    "Respuesta:  \n",
    "\n",
    "             country  drives_right  cars_per_cap  \n",
    "    0  United States          True           809  \n",
    "    1      Australia         False           731  \n",
    "    2          Japan         False           588  \n",
    "    3          India         False            18  \n",
    "    4         Russia          True           200  \n",
    "    5        Morocco          True            70  \n",
    "    6          Egypt          True            45  \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Pre-defined lists\n",
    "names = ['United States', 'Australia', 'Japan', 'India', 'Russia', 'Morocco', 'Egypt']\n",
    "dr =  [True, False, False, False, True, True, True]\n",
    "cpc = [809, 731, 588, 18, 200, 70, 45]\n",
    "\n",
    "# Import pandas as pd\n",
    "\n",
    "\n",
    "# Create dictionary my_dict with three key:value pairs: my_dict\n",
    "\n",
    "\n",
    "# Build a DataFrame cars from my_dict: cars\n",
    "\n",
    "\n",
    "# Print cars\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Diccionario a DataFrame (2)\n",
    "\n",
    "¿Ha notado que las etiquetas de fila (es decir, las etiquetas para las diferentes observaciones) se configuraron automáticamente en enteros de 0 a 6?\n",
    "\n",
    "Para resolver esto, se ha creado una lista *row_labels* . Puede usarlo para especificar las etiquetas de fila del DataFrame *cars*. Para ello, establezca el atributo *index* de *cars*, al que puede acceder como *cars.index*.\n",
    "\n",
    "<div class=\"alert alert-info\">\n",
    "    \n",
    "**Actividad**\n",
    "    \n",
    "</div>\n",
    "\n",
    "* Ejecute el código para ver que las etiquetas de fila no están configuradas correctamente.\n",
    "* Especifique las etiquetas de fila estableciendo *cars.index* igual a *row_labels*.\n",
    "* Imprima nuevamente *cars* y compruebe si las etiquetas de las filas son correctas esta vez.\n",
    "\n",
    "Respuesta:\n",
    "\n",
    "                 country  drives_right  cars_per_cap\n",
    "        0  United States          True           809\n",
    "        1      Australia         False           731\n",
    "        2          Japan         False           588\n",
    "        3          India         False            18\n",
    "        4         Russia          True           200\n",
    "        5        Morocco          True            70\n",
    "        6          Egypt          True            45\n",
    "                   country  drives_right  cars_per_cap\n",
    "        US   United States          True           809\n",
    "        AUS      Australia         False           731\n",
    "        JPN          Japan         False           588\n",
    "        IN           India         False            18\n",
    "        RU          Russia          True           200\n",
    "        MOR        Morocco          True            70\n",
    "        EG           Egypt          True            45"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "\n",
    "# Build cars DataFrame\n",
    "names = ['United States', 'Australia', 'Japan', 'India', 'Russia', 'Morocco', 'Egypt']\n",
    "dr =  [True, False, False, False, True, True, True]\n",
    "cpc = [809, 731, 588, 18, 200, 70, 45]\n",
    "cars_dict = { 'country':names, 'drives_right':dr, 'cars_per_cap':cpc }\n",
    "cars = pd.DataFrame(cars_dict)\n",
    "print(cars)\n",
    "\n",
    "# Definition of row_labels\n",
    "row_labels = ['US', 'AUS', 'JPN', 'IN', 'RU', 'MOR', 'EG']\n",
    "\n",
    "# Specify row labels of cars\n",
    "\n",
    "\n",
    "# Print cars again\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## CSV a DataFrame (1)\n",
    "\n",
    "Poner datos en un diccionario y luego construir un DataFrame funciona, pero no es muy eficiente. ¿Qué pasa si se trata de millones de observaciones? En esos casos, los datos generalmente están disponibles como archivos con una estructura regular. Uno de esos tipos de archivo es el archivo CSV, que es la abreviatura de \"valores separados por comas\".\n",
    "\n",
    "Para importar datos CSV en Python como Pandas DataFrame, puede usar **read_csv()**.\n",
    "\n",
    "Exploremos esta función con los mismos datos de autos de los ejercicios anteriores. Esta vez, sin embargo, los datos están disponibles en un archivo CSV, llamado *cars.csv*. Está disponible en su directorio de trabajo actual, por lo que la ruta al archivo es sencilla *'cars.csv'*.\n",
    "\n",
    "<div class=\"alert alert-info\">\n",
    "    \n",
    "**Actividad**\n",
    "    \n",
    "</div>\n",
    "\n",
    "* Para importar archivos CSV, aún necesita el paquete pandas: impórtelo como pd.\n",
    "* Se usa pd.read_csv() para importar datos *'data/cars.csv'* como un DataFrame con sep =';'. Almacene este marco de datos como *cars*.\n",
    "* Imprimir *cars*. ¿Todo se ve bien?\n",
    "\n",
    "Respuesta:\n",
    "\n",
    "      Unnamed: 0  cars_per_cap        country  drives_right\n",
    "    0         US           809  United States          True\n",
    "    1        AUS           731      Australia         False\n",
    "    2        JPN           588          Japan         False\n",
    "    3         IN            18          India         False\n",
    "    4         RU           200         Russia          True\n",
    "    5        MOR            70        Morocco          True\n",
    "    6         EG            45          Egypt          True"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Import pandas as pd\n",
    "\n",
    "\n",
    "# Import the cars.csv data: cars\n",
    "\n",
    "\n",
    "# Print out cars\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## CSV a DataFrame (2)\n",
    "\n",
    "Su llamada read_csv() para importar los datos CSV no generó un error, pero el resultado no es del todo lo que queríamos. Las etiquetas de fila se importaron como otra columna sin nombre.\n",
    "\n",
    "Para corregir esto en read_csv() agregamo el argumento **index_col** para especificar qué columna del archivo CSV debe usarse como etiqueta de fila\n",
    "\n",
    "El código Python que resuelve el ejercicio anterior ya está incluido; ¿Puedes hacer los cambios apropiados para arreglar la importación de datos?\n",
    "\n",
    "<div class=\"alert alert-info\">\n",
    "    \n",
    "**Actividad**\n",
    "    \n",
    "</div>\n",
    "\n",
    "* Ejecute el código con Código de ejecución y afirme que la primera columna debería usarse como etiquetas de fila.\n",
    "* Especifique el argumento index_col dentro **pd.read_csv()**: configúrelo *0* para que la primera columna se use como etiquetas de fila.\n",
    "* ¿Ha carsmejorado la impresión de ahora?\n",
    "\n",
    "Respuesta:\n",
    "\n",
    "         cars_per_cap        country  drives_right\n",
    "    US            809  United States          True\n",
    "    AUS           731      Australia         False\n",
    "    JPN           588          Japan         False\n",
    "    IN             18          India         False\n",
    "    RU            200         Russia          True\n",
    "    MOR            70        Morocco          True\n",
    "    EG             45          Egypt          True"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Import pandas as pd\n",
    "import pandas as pd\n",
    "\n",
    "# Fix import by including index_col\n",
    "cars = pd.read_csv('data/cars.csv', sep =';')\n",
    "\n",
    "# Print out cars\n",
    "print(cars)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Corchetes (1)\n",
    "\n",
    "\n",
    "En el código de muestra, los mismos datos de automóviles se importan de un archivo CSV como un DataFrame de Pandas. Para seleccionar solo la columna *cars_per_cap* de *cars*, puede usar:\n",
    "\n",
    "```python\n",
    "cars['cars_per_cap']\n",
    "cars[['cars_per_cap']]\n",
    "```\n",
    "La versión de un corchete ofrece una Serie Pandas, la versión de doble corchete ofrece un DataFrame de Pandas.\n",
    "\n",
    "<div class=\"alert alert-info\">\n",
    "    \n",
    "**Actividad**\n",
    "    \n",
    "</div>\n",
    "\n",
    "* Use corchetes individuales para imprimir un Series de la columna *country* de *cars* .\n",
    "* Use corchetes dobles para imprimir un DataFrame de la columna *country* de *carsun* .\n",
    "* Use corchetes dobles para imprimir un DataFrame con las columnas *country* y *drives_right* de *cars*, en este orden.\n",
    "\n",
    "Respueta:\n",
    "\n",
    "    US     United States\n",
    "    AUS        Australia\n",
    "    JPN            Japan\n",
    "    IN             India\n",
    "    RU            Russia\n",
    "    MOR          Morocco\n",
    "    EG             Egypt\n",
    "    Name: country, dtype: object\n",
    "               country\n",
    "    US   United States\n",
    "    AUS      Australia\n",
    "    JPN          Japan\n",
    "    IN           India\n",
    "    RU          Russia\n",
    "    MOR        Morocco\n",
    "    EG           Egypt\n",
    "               country  drives_right\n",
    "    US   United States          True\n",
    "    AUS      Australia         False\n",
    "    JPN          Japan         False\n",
    "    IN           India         False\n",
    "    RU          Russia          True\n",
    "    MOR        Morocco          True\n",
    "    EG           Egypt          True"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Import cars data\n",
    "import pandas as pd\n",
    "cars = pd.read_csv('data/cars.csv', sep =';', index_col=0)\n",
    "\n",
    "# Print out country column as Pandas Series\n",
    "\n",
    "\n",
    "# Print out country column as Pandas DataFrame\n",
    "\n",
    "\n",
    "# Print out DataFrame with country and drives_right columns\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Corchetes (2)\n",
    "\n",
    "Los corchetes pueden hacer más que solo seleccionar columnas. También puede usarlos para obtener filas u observaciones de un DataFrame. La siguiente llamada selecciona las primeras cinco filas del DataFrame *cars*:\n",
    "\n",
    "```python\n",
    "cars[0:5]\n",
    "```\n",
    "\n",
    "El resultado es otro DataFrame que contiene solo las filas que especificó.\n",
    "\n",
    "Preste atención: solo puede seleccionar filas usando corchetes si especifica un corte, como 0:4. Además, está utilizando los índices enteros de las filas aquí, ¡no las etiquetas de las filas!\n",
    "\n",
    "<div class=\"alert alert-info\">\n",
    "    \n",
    "**Actividad**\n",
    "    \n",
    "</div>\n",
    "\n",
    "* Seleccione las primeras 3 observaciones de *cars* e imprímalas.\n",
    "* Seleccione la cuarta, quinta y sexta observación, correspondiente a los índices de fila 3, 4 y 5, e imprímalos.\n",
    "\n",
    "Respuesta:\n",
    "\n",
    "         cars_per_cap        country  drives_right\n",
    "    US            809  United States          True\n",
    "    AUS           731      Australia         False\n",
    "    JPN           588          Japan         False\n",
    "         cars_per_cap  country  drives_right\n",
    "    IN             18    India         False\n",
    "    RU            200   Russia          True\n",
    "    MOR            70  Morocco          True"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Import cars data\n",
    "import pandas as pd\n",
    "cars = pd.read_csv('data/cars.csv', sep =';', index_col=0)\n",
    "\n",
    "# Print out first 3 observations\n",
    "\n",
    "\n",
    "# Print out fourth, fifth and sixth observation\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## loc e iloc (1)\n",
    "\n",
    "Con *loc* y *iloc* puede hacer prácticamente cualquier operación de selección de datos en DataFrames que se le ocurra. *loc* está basado en etiquetas, lo que significa que debe especificar filas y columnas en función de sus etiquetas de fila y columna. *iloc* está basado en un índice entero, por lo que debe especificar filas y columnas por su índice entero como lo hizo en el ejercicio anterior.\n",
    "\n",
    "Pruebe los siguientes comandos en Jupyter para experimentar *loc* y *iloc* seleccionar observaciones. Cada par de comandos aquí da el mismo resultado.\n",
    "\n",
    "```python\n",
    "cars.loc['RU']  \n",
    "cars.iloc[4]\n",
    "\n",
    "cars.loc[['RU']]  \n",
    "cars.iloc[[4]]\n",
    "\n",
    "cars.loc[['RU', 'AUS']]  \n",
    "cars.iloc[[4, 1]]\n",
    "```\n",
    "\n",
    "<div class=\"alert alert-info\">\n",
    "    \n",
    "**Actividad**\n",
    "    \n",
    "</div>\n",
    "\n",
    "* Use *loc* o *iloc* para seleccionar la observación correspondiente a Japón como Serie. La etiqueta de esta fila es JPN, el índice es 2. Asegúrese de imprimir la serie resultante.\n",
    "* Use *loc* o *iloc* para seleccionar las observaciones de Australia y Egipto como un DataFrame. Puede conocer las etiquetas / índices de estas filas inspeccionando *cars*. Asegúrese de imprimir el DataFrame resultante.\n",
    "\n",
    "Respuesta:\n",
    "\n",
    "    cars_per_cap      588\n",
    "    country         Japan\n",
    "    drives_right    False\n",
    "    Name: JPN, dtype: object\n",
    "         cars_per_cap    country  drives_right\n",
    "    AUS           731  Australia         False\n",
    "    EG             45      Egypt          True"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Import cars data\n",
    "import pandas as pd\n",
    "cars = pd.read_csv('data/cars.csv', sep =';', index_col=0)\n",
    "\n",
    "# Print out observation for Japan\n",
    "\n",
    "\n",
    "# Print out observations for Australia and Egypt\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## loc e iloc (2)\n",
    "\n",
    "*loc* y *iloc* también le permite seleccionar tanto filas como columnas de un DataFrame. Para experimentar, pruebe los siguientes comandos. Nuevamente, los comandos emparejados producen el mismo resultado.\n",
    "\n",
    "```python\n",
    "cars.loc['IN', 'cars_per_cap']  \n",
    "cars.iloc[3, 0]\n",
    "\n",
    "cars.loc[['IN', 'RU'], 'cars_per_cap']  \n",
    "cars.iloc[[3, 4], 0]\n",
    "\n",
    "cars.loc[['IN', 'RU'], ['cars_per_cap', 'country']]  \n",
    "cars.iloc[[3, 4], [0, 1]]\n",
    "```\n",
    "\n",
    "<div class=\"alert alert-info\">\n",
    "    \n",
    "**Actividad**\n",
    "    \n",
    "</div>\n",
    "\n",
    "* Imprima el valor de *drives_right* de la fila correspondiente a Marruecos (su etiqueta de fila es *MOR*)\n",
    "* Imprima un sub-DataFrame, que contiene las observaciones para Rusia y Marruecos y las columnas *country* y *drives_right*.\n",
    "\n",
    "Respuesta:\n",
    "\n",
    "    True\n",
    "         country  drives_right\n",
    "    RU    Russia          True\n",
    "    MOR  Morocco          True"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Import cars data\n",
    "import pandas as pd\n",
    "cars = pd.read_csv('data/cars.csv', sep =';', index_col=0)\n",
    "\n",
    "# Print out drives_right value of Morocco\n",
    "\n",
    "\n",
    "# Print sub-DataFrame\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## loc e iloc (3)\n",
    "\n",
    "También es posible seleccionar solo columnas con *loc* y *iloc*. En ambos casos, simplemente coloca dos puntos para ir de principio a fin delante de la coma:\n",
    "\n",
    "```python\n",
    "cars.loc[:, 'country']  \n",
    "cars.iloc[:, 1]\n",
    "\n",
    "cars.loc[:, ['country','drives_right']]  \n",
    "cars.iloc[:, [1, 2]]\n",
    "```\n",
    "\n",
    "<div class=\"alert alert-info\">\n",
    "    \n",
    "**Actividad**\n",
    "    \n",
    "</div>\n",
    "\n",
    "* Imprima la columna *drives_right* como una serie con *loc* o *iloc*.\n",
    "* Imprima la columna *drives_right* como un DataFrame con *loc* o *iloc*.\n",
    "* Imprima las cars_per_cap y drives_right columnas como un DataFrame con *loc* o *iloc*.\n",
    "\n",
    "Resultado:\n",
    "\n",
    "    US      True\n",
    "    AUS    False\n",
    "    JPN    False\n",
    "    IN     False\n",
    "    RU      True\n",
    "    MOR     True\n",
    "    EG      True\n",
    "    Name: drives_right, dtype: bool\n",
    "         drives_right\n",
    "    US           True\n",
    "    AUS         False\n",
    "    JPN         False\n",
    "    IN          False\n",
    "    RU           True\n",
    "    MOR          True\n",
    "    EG           True\n",
    "         cars_per_cap  drives_right\n",
    "    US            809          True\n",
    "    AUS           731         False\n",
    "    JPN           588         False\n",
    "    IN             18         False\n",
    "    RU            200          True\n",
    "    MOR            70          True\n",
    "    EG             45          True"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Import cars data\n",
    "import pandas as pd\n",
    "cars = pd.read_csv('data/cars.csv', sep =';', index_col=0)\n",
    "\n",
    "# Print out drives_right column as Series\n",
    "\n",
    "\n",
    "# Print out drives_right column as DataFrame\n",
    "\n",
    "\n",
    "# Print out cars_per_cap and drives_right as DataFrame\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.10"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
