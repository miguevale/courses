{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Practica 06 - Funciones de usuario"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Defina una función, , que simplemente imprime una cadena con tres signos de exclamación al final '!!!'. A continuación se presenta un ejemplo de código. Puede utilizarlo como patrón para definir shout().\n",
    "\n",
    "```python\n",
    "def square():\n",
    "    new_value = 4 ** 2\n",
    "    return new_value\n",
    "```\n",
    "Tenga en cuenta que el cuerpo de la función tiene una identación de 4 espacios. \n",
    "\n",
    "<div class=\"alert alert-info\">\n",
    "    \n",
    "**Actividad**\n",
    "    \n",
    "</div>\n",
    "\n",
    "* Defina la función **mi_funcion()**.\n",
    "* En el cuerpo de la función coóm un concatenado de \"*Felicitaciones* \" y \" *mi primera función*\" y asignela a la variable **my_word**.\n",
    "* Imprima el valor de **my_word**.\n",
    "* Llame la función **mi_funcion()**.\n",
    "\n",
    "Respuesta: Felicitaciones mi primera función"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Defina la función mi_funcion\n",
    "\n",
    "    \"\"\"Imprime un string\"\"\"\n",
    "    # Concatene los strings: my_word\n",
    "    \n",
    "\n",
    "    # Print my_word\n",
    "    \n",
    "\n",
    "# llame mi_funcion\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Funciones de un solo parámetro\n",
    "\n",
    "\n",
    "En el ejercicio anterior, definió y llamó a la función que imprimió una cadena concatenada. Ahora se actualizará agregando un parámetro para que pueda aceptar y procesar cualquier argumento de cadena que se le pase.\n",
    "\n",
    "<div class=\"alert alert-info\">\n",
    "    \n",
    "**Actividad**\n",
    "    \n",
    "</div>\n",
    "\n",
    "* Complete el encabezado de la función agregando el nombre del parámetro **word**.\n",
    "* Asigne el resultado de concatenar *word* con ' *mi primera función*' a **my_word**\n",
    "* Imprima el valor de **my_word**.\n",
    "* Llame la función **mi_funcion()**, pasándole el string '*Felicitaciones*'.\n",
    "\n",
    "Respuesta:\n",
    "Felicitaciones mi primera función"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Defina mi_funcion con el parametro, word\n",
    "def mi_funcion():\n",
    "    \"\"\"Imprime un string\"\"\"\n",
    "    # Concatene los strings: my_word\n",
    "    my_word = \n",
    "\n",
    "    # Print my_word\n",
    "    \n",
    "\n",
    "# Llame mi_funcion con el string 'Felicitaciones'\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Funciones que devuelven valores únicos\n",
    "\n",
    "Pruebe otra modificación de la función para que ahora devuelva un solo valor en lugar de imprimir dentro de la función. \n",
    "\n",
    "<div class=\"alert alert-info\">\n",
    "    \n",
    "**Actividad**\n",
    "    \n",
    "</div>\n",
    "\n",
    "* En el cuerpo de la función, concatenar el string word con ' *mi primera función*' y asignarla a **my_word**.\n",
    "* Reemplace la función **print()** por **return**.\n",
    "* Llame la función **mi_funcion()**, pasándole el string '*Felicitaciones*' y asignandola a la variable **my_result**.\n",
    "* Imprima **my_result** para comprobar que tiene un valor.\n",
    "\n",
    "Respuesta: Felicitaciones mi primera función"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Defina mi_funcion con el parametro, word\n",
    "def mi_funcion(word):\n",
    "    \"\"\"Imprime un string\"\"\"\n",
    "     # Concatene los strings: my_word\n",
    "    my_word =\n",
    "\n",
    "    # Reemplace print por return\n",
    "    print(my_word)\n",
    "\n",
    "# Pase 'Felicitaciones' a mi_funcion: my_result\n",
    "\n",
    "\n",
    "# Print my_result\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Funciones con múltiples parámetros\n",
    "\n",
    "Aquí modificará la función para aceptar dos argumentos. Se muestran partes de la función, que escribió anteriormente.\n",
    "\n",
    "<div class=\"alert alert-info\">\n",
    "    \n",
    "**Actividad**\n",
    "    \n",
    "</div>\n",
    "\n",
    "* Modifique el encabezado de la función de modo que acepte dos parámetros **word1** y **word2** en ese orden.\n",
    "* Concatenar cada una de las variables **word1** y **word2** con ' *mi primera función*' y asignarlas respectivamente a **my_word1** y **my_word2**.\n",
    "* Asigne a **my_new_word** el contatenado de **my_word1** y **my_word2**.\n",
    "* Llame la función **mi_funcion()** con los parámetros '*Felicitaciones*' y '*que bien*', en ese orden, y asigne el valor devuelto a **my_result**\n",
    "\n",
    "Respuesta: Felicitaciones mi primera funciónque bien mi primera función"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Defina mi_funcion con los parametros, word1 y word2\n",
    "def mi_funcion(word1):\n",
    "    \"\"\"Concatena strings y los retorna\"\"\"\n",
    "    # Concatene word1 con ' mi primera función': my_word1\n",
    "    my_word1 = \n",
    "    \n",
    "    # Concatene word2 con ' mi primera función': my_word2\n",
    "    my_word2 = \n",
    "    \n",
    "    # Concatene my_word1 con my_word2: my_new_word\n",
    "    my_new_word = \n",
    "\n",
    "    # Return my_result\n",
    "    return my_new_word\n",
    "\n",
    "# Pase 'Felicitaciones' y 'que bien' to mi_funcion(): my_result\n",
    "my_result = mi_funcion()\n",
    "\n",
    "# Print yell\n",
    "print(my_result)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Funciones que devuelven varios valores\n",
    "\n",
    "Aquí devolverá varios valores de una función mediante tuplas. Ahora vamos a actualizar nuestra función para devolver varios valores. En lugar de devolver solo una cadena, devolveremos dos cadenas!!!\n",
    "\n",
    "<div class=\"alert alert-info\">\n",
    "    \n",
    "**Actividad**\n",
    "    \n",
    "</div>\n",
    "\n",
    "* Modifique el encabezado de la función de modo que el nombre de la función sea **mi_funcion_completa**  y que acepte dos parámetros **word1** y **word2** en ese orden. \n",
    "* Concatenar cada una de las variables **word1** y **word2** con ' *mi primera función*' y asignarlas respectivamente a **my_word1** y **my_word2**.\n",
    "* Construya la tupla **my_new_word**, compuesta de **my_word1** y **my_word2**.\n",
    "* Llame la función **mi_funcion_completa()** con los string '*Felicitaciones*' y '*que bien*' como parámetros. Asigne el resultado a **my_result1** y **my_result2** (recuerde que **mi_funcion_completa()**, devuelve 2 variables).\n",
    "\n",
    "Respuesta:  \n",
    "Felicitaciones mi primera función\n",
    "que bien mi primera función"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Defina mi_funcion_completa con los parametros, word1 y word2\n",
    "def mi_funcion_completa():\n",
    "    \"\"\"Concatena strings y los retorna\"\"\"\n",
    "    # Concatene word1 con ' mi primera función': my_word1\n",
    "    my_word1 = \n",
    "    \n",
    "    # Concatene word2 con ' mi primera función': my_word2\n",
    "    my_word2 = \n",
    "    \n",
    "    # Construya una tuple con my_word1 y my_word2: my_new_word\n",
    "    my_new_word = \n",
    "\n",
    "    # Return my_new_word\n",
    "    return my_new_word\n",
    "\n",
    "# Pase 'Felicitaciones' y 'que bien' to mi_funcion_completa(): my_result1, my_result2\n",
    "my_result1, my_result2 = \n",
    "\n",
    "# Print my_result1 y my_result\n",
    "print(my_result1)\n",
    "print(my_result2)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Funciones con un argumento predeterminado\n",
    "\n",
    "Has aquí usted ha aprendido a definir funciones con más de un parámetro, pasando el número necesario de argumentos. En este ejercicio usted practicará esa habilidad escribiendo una función que use un argumento predeterminado.\n",
    "\n",
    "<div class=\"alert alert-info\">\n",
    "    \n",
    "**Actividad**\n",
    "    \n",
    "</div>\n",
    "\n",
    "* Complete el encabezado de la función con el nombre **mi_funcion()**. Acepta un argumento **word1** y un argumento predeterminado **echo** con el valor predeterminado de 1 en ese orden.\n",
    "* En el cuerpo de la función utilice el operador concatenar para unir **word1** con **echo**. Asigne el resultado a **echo_word**\n",
    "* Llame la función **mi_funcion()** solo con el string \"*Hey*\" cómo argumento. Asigne el resultado a **no_echo**.\n",
    "* Llame la función **mi_funcion()** con el string \"*Hey*\" en el primer argumento **word1** y para el argumento predeterminado **echo** el valor de *5*. Asigne el resultado a **with_echo**.\n",
    "\n",
    "Resultado:  \n",
    "Hey!!!  \n",
    "HeyHeyHeyHeyHey!!!"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Define mi_funcion\n",
    "def mi_funcion():\n",
    "    \"\"\"Concatenate echo copies of word1 and three\n",
    "     exclamation marks at the end of the string.\"\"\"\n",
    "\n",
    "    # Concatene echo con word1 usando * para crear copias: echo_word\n",
    "    echo_word = \n",
    "\n",
    "    # Concatene '!!!' a echo_word: my_word\n",
    "    my_word = echo_word + '!!!'\n",
    "\n",
    "    # Return my_word\n",
    "    return my_word\n",
    "\n",
    "# Llame mi_funcion() con el string \"Hey\": no_echo\n",
    "\n",
    "\n",
    "# Call mi_funcion() con el string \"Hey\" y echo=5: with_echo\n",
    "\n",
    "\n",
    "# Print no_echo y with_echo\n",
    "print(no_echo)\n",
    "print(with_echo)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Funciones con varios argumentos predeterminados\n",
    "\n",
    "Ahora intentará definir una función con más de un argumento predeterminado y luego llamará a esta función de varias maneras.\n",
    "\n",
    "Después de definir la función, la llamará proporcionando valores a todos los argumentos predeterminados de la función.\n",
    "\n",
    "<div class=\"alert alert-info\">\n",
    "    \n",
    "**Actividad**\n",
    "    \n",
    "</div>\n",
    "\n",
    "\n",
    "* Complete el encabezado de la función con el nombre de la función. Acepta un argumento word1, un argumento predeterminado echo con valor predeterminado de 1 y un argumento predeterminado intense con valor predeterminado False, en ese orden. \n",
    "* En el cuerpo de la instrucción **if**, convierta en mayúscula el objeto string aplicando el método **echo_word.upper()**.  \n",
    "* Llamela función **mi_funcion()** con el string **word1 = \"Hey\", echo = 5, intense = True**. Asigne el resultado a \"**with_big_echo**\".\n",
    "* Llame la función **mi_funcion()** con el sring **word1 = \"Hey\"**, **intense = True**. Asigne el resultado a **big_no_echo**.\n",
    "\n",
    "Resultado:  \n",
    "HEYHEYHEYHEYHEY!!!  \n",
    "HEY!!!"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Define mi_funcion\n",
    "def mi_funcion(word1, echo = 1, intense = False):\n",
    "    \"\"\"Concatenate echo copies of word1 and three\n",
    "    exclamation marks at the end of the string.\"\"\"\n",
    "\n",
    "    # Concatenate echo copies of word1 using *: echo_word\n",
    "    echo_word = word1 * echo\n",
    "\n",
    "    # Make echo_word uppercase if intense is True\n",
    "    if intense is True:\n",
    "        # Make uppercase and concatenate '!!!': echo_word_new\n",
    "        echo_word_new = echo_word + '!!!'\n",
    "    else:\n",
    "        # Concatenate '!!!' to echo_word: echo_word_new\n",
    "        echo_word_new = echo_word + '!!!'\n",
    "\n",
    "    # Return echo_word_new\n",
    "    return echo_word_new\n",
    "\n",
    "# Call mi_funcion() with \"Hey\", echo=5 and intense=True: with_big_echo\n",
    "\n",
    "\n",
    "# Call mi_funcion() with \"Hey\" and intense=True: big_no_echo\n",
    "\n",
    "\n",
    "# Print values\n",
    "print(with_big_echo)\n",
    "print(big_no_echo)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## La palabra clave global\n",
    "\n",
    "Trabajemos más en su dominio del alcance. En este ejercicio, usará la palabra clave **global** dentro de una función para modificar el valor de una variable definida en el ámbito global.\n",
    "\n",
    "<div class=\"alert alert-info\">\n",
    "    \n",
    "**Actividad**\n",
    "    \n",
    "</div>\n",
    "\n",
    "* Utilice la palabra clave **global** para modificar el objeto **team** en el ámbito global en el cuerpo de la función.\n",
    "* Cambie el valor de **team** en el ámbito global a la cadena \"*justice league*\". Asigne el resultado a **team**.\n",
    "* Ejecute la función **change_team()** para ver como cambia el valor de **team**.\n",
    "\n",
    "Resultado:  \n",
    "teen titans  \n",
    "justice league"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Crea el string: team\n",
    "team = \"teen titans\"\n",
    "\n",
    "# Defina change_team()\n",
    "def change_team():\n",
    "    \"\"\"Change the value of the global variable team.\"\"\"\n",
    "\n",
    "    # Use team en global scope\n",
    "    \n",
    "\n",
    "    # Cambie el valor de team en global: team\n",
    "    \n",
    "# Print team\n",
    "print(team)\n",
    "\n",
    "# LLame change_team()\n",
    "change_team()\n",
    "\n",
    "# Print team\n",
    "print(team)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.10"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
